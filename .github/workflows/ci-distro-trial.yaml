name: ci-distro-trial
description: Produce a new configuration for a distribution

# Any env variables we need to run this workflow
env:
  CONF_PLATFORM: # {{ os }}
  CONF_DISTRO: # {{ distro }}
  CONF_EPOCH: # {{ epoch }}

on:
  workflow_dispatch: {}
  pull_request:
    paths:
      - 20*.*/tested/conda_build_config.yaml

jobs:
  conf:
    runs-on: ubuntu-latest # this job is always run on linux
    outputs:
      platform: ${{ steps.set-vars.outputs.platform }}
      distro: ${{ steps.set-vars.outputs.distro }}
      epoch: ${{ steps.set-vars.outputs.epoch }}
    steps:
      - name: set-vars
        id: set-vars
          run: |
            echo "::set-output name=platform::$CONF_PLATFORM"
            echo "::set-output name=distro::$CONF_DISTRO"
            echo "::set-output name=epoch::$CONF_EPOCH"

  make-dag:
    needs: conf
    runs-on: ${{ needs.conf.outputs.platform }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/make-dag
        with:


####################

# jobs:

#   test-package:
#     name: test ${{ matrix.pkg.name }}
#     needs: [conf, integrate]
#     runs-on: ${{ needs.conf.outputs.platform }}
#     strategy:
#       fail-fast: false
#       matrix:
#         pkg: ${{ fromJson(needs.integrate.outputs.pkgs) }}
#     steps:
#       - uses: actions/checkout@v2
#       - uses: ./.github/actions/configure-conda
#       - uses: ./.github/actions/test-package
#         with:
#           pkg-url: ${{ matrix.pkg.url }}
#           q2-channel: ${{ needs.integrate.outputs.q2-channel }}
#           metapackage-spec: ${{ needs.integrate.outputs.metapackage-spec }}

#   phone-home:
#     needs: [conf, test-package]
#     runs-on: ${{ needs.conf.outputs.platform }}
#     steps:
#       - uses: actions/checkout@v2
#       - uses: ./.github/actions/configure-conda
#       - uses: ./.github/actions/phone-home-pass
#         with:
#           token: ${{ secrets.LIBRARY_TOKEN }}
#           epoch: ${{ needs.conf.outputs.epoch }}
#           distro: ${{ needs.conf.outputs.distro }}
#           platform: ${{ needs.conf.outputs.platform }}
